(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('react-native')) :
  typeof define === 'function' && define.amd ? define(['react', 'react-native'], factory) :
  (global = global || self, global['react-native-hooks-dimensions'] = factory(global.React, global.reactNative));
}(this, function (react, reactNative) { 'use strict';

  var react__default = 'default' in react ? react['default'] : react;

  /* eslint-disable no-unused-vars */
  var enums = ['window', 'screen'];
  var initialDimensions = {
    fontScale: null,
    height: null,
    width: null,
    scale: null
  };
  var index = (function (type) {
    if (enums.indexOf(type) === -1) {
      return initialDimensions;
    }

    var _useState = react.useState(reactNative.Dimensions.get(type)),
        dimensions = _useState[0],
        setDimensions = _useState[1];

    react.useEffect(function () {
      var currentDimensions = reactNative.Dimensions.get(type);
      setDimensions(currentDimensions);
    }, [type]);
    react.useEffect(function () {
      function dimensionsChange(params) {
        setDimensions(params[type]);
      }

      reactNative.Dimensions.addEventListener('change', dimensionsChange);
      return function () {
        reactNative.Dimensions.removeEventListener('change', dimensionsChange);
      };
    }, [type]);
    return dimensions;
  });

  return index;

}));
//# sourceMappingURL=react-native-hooks-dimensions.js.map
